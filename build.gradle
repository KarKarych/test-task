import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

import static java.nio.file.Path.of

plugins {
  id "java"
  id "org.springframework.boot" version "3.0.2"
  id "io.spring.dependency-management" version "1.1.0"
}

group = "relex-task"
version = "1.0"
sourceCompatibility = "17"

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-validation"
  implementation "org.springframework.boot:spring-boot-starter-web"

  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml"

  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "io.hypersistence:hypersistence-utils-hibernate-60:3.2.0"

  runtimeOnly "org.postgresql:postgresql"
  implementation "org.liquibase:liquibase-core"

  implementation "org.springframework.boot:spring-boot-starter-mail"

  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2"
  implementation "org.springdoc:springdoc-openapi-starter-common:2.0.2"

  implementation "org.springframework.boot:spring-boot-starter-security"

  compileOnly "org.projectlombok:lombok"
  annotationProcessor "org.projectlombok:lombok"

  developmentOnly "org.springframework.boot:spring-boot-devtools"
}

tasks.named("test") {
  useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = "UTF-8"
}

tasks.register("newMigration") {
  doLast {

    def pathToScriptsDir = of("${project.projectDir}/src/main/resources/db/migration/v1/1.0")

    String migrationId = "RT-001-${DateTimeFormatter.ofPattern("yyyyMMddHHmm").format(LocalDateTime.now())}"

    pathToScriptsDir.resolve("_changelog-cumulative.yaml").append(
      """  - changeSet:
      id: ${migrationId}
      author: wvolfff
      comment: TODO
      changes:
        - sqlFile:
            path: 1.0/${migrationId}.sql
            relativeToChangelogFile: true
""")
    pathToScriptsDir.resolve("${migrationId}.sql").toFile().createNewFile()
  }
}
